
#
# Usage:
# ------
#
# This docker compose file parameterizes build configurations using environment
# variables from the host. The default values for the build configuration
# variables are set in `.env`.
#
# Variables:
#   ARCH={amd64, arm64v8, ...}
#   COMPILER_TYPE={gnu, clang, intel, nvidia}
#   COMPILER={gcc-5, gcc-6, gcc-7, gcc-8, gcc-9, gcc-10,
#             clang-3.9, clang-4.0, clang-5.0, clang-6.0, clang-7, clang-8,
#             clang-9, clang-10,
#             icc-18, icc-19,
#             nvcc-10, nvcc-11}
#   REPO=lifflander1/checkpoint
#   UBUNTU={18.04}
#   ULIMIT_CORE=0
#
# DARMA/checkpoint Configuration Variables:
#   CHECKPOINT_DOCS=0    # Enable doxygen build
#   BUILD_TYPE=release   # CMake build type
#   CODE_COVERAGE=0      # Enable generation of code coverage reports
#
# In order to run in the container, there are two stages. First, one must build
# or pull the base container with the variables exported (or using the defaults
# in `checkpoint/.env` that configure it:
#
# For a non-interactive build with gcc-8, since gnu is the default compiler
# type, one may do the following:
#
#  $ COMPILER=gcc-8 docker-compose pull ubuntu-cpp
#  $ COMPILER=gcc-8 docker-compose run ubuntu-cpp
#

# Need verision >= 3.5 for the features in use
version: '3.5'

# Named volumes must be predefined according the docker compose rules. Many
# combinations have already been added, but if a needed configuration is missing
# add it to this list. For example, for ARM64v8 on Ubuntu 20.04 with clang-9,
# add `arm64v8-ubuntu-20.04-clang-9-cache`.
volumes:
  amd64-ubuntu-18.04-clang-3.9-cache:
  amd64-ubuntu-18.04-clang-4.0-cache:
  amd64-ubuntu-18.04-clang-5.0-cache:
  amd64-ubuntu-18.04-clang-6.0-cache:
  amd64-ubuntu-18.04-clang-7-cache:
  amd64-ubuntu-18.04-clang-8-cache:
  amd64-ubuntu-18.04-clang-9-cache:
  amd64-ubuntu-20.04-clang-10-cache:
  amd64-ubuntu-18.04-gcc-5-cache:
  amd64-ubuntu-18.04-gcc-6-cache:
  amd64-ubuntu-18.04-gcc-7-cache:
  amd64-ubuntu-18.04-gcc-8-cache:
  amd64-ubuntu-20.04-gcc-9-cache:
  amd64-ubuntu-20.04-gcc-10-cache:
  amd64-ubuntu-18.04-icc-18-cache:
  amd64-ubuntu-18.04-icc-19-cache:
  amd64-ubuntu-18.04-icc-20-cache:
  amd64-ubuntu-18.04-nvcc-10-cache:
  amd64-ubuntu-18.04-nvcc-11-cache:
  amd64-alpine-clang-3.9-cache:
  amd64-alpine-clang-4.0-cache:
  amd64-alpine-clang-5.0-cache:
  amd64-alpine-clang-6.0-cache:
  amd64-alpine-clang-7-cache:
  amd64-alpine-clang-8-cache:
  amd64-alpine-clang-9-cache:
  amd64-alpine-clang-10-cache:
  amd64-alpine-gcc-5-cache:
  amd64-alpine-gcc-6-cache:
  amd64-alpine-gcc-7-cache:
  amd64-alpine-gcc-8-cache:
  amd64-alpine-gcc-9-cache:
  amd64-alpine-gcc-10-cache:
  amd64-alpine-icc-18-cache:
  amd64-alpine-icc-19-cache:
  amd64-alpine-icc-20-cache:
  amd64-alpine-nvcc-10-cache:
  amd64-alpine-nvcc-11-cache:
  arm64v8-ubuntu-18.04-gcc-7-cache:
  arm64v8-alpine-gcc-7-cache:

# Define basic rules for ccache used across multiple services. The beauty of
# docker compose with cached volumes is that similarily configured builds will
# reuse a ccache volume making build speeds much faster than a fresh build each
# time.
x-ccache: &ccache
  CCACHE_COMPILERCHECK: content
  CCACHE_COMPRESS: 1
  CCACHE_COMPRESSLEVEL: 5
  CCACHE_MAXSIZE: 700M
  CCACHE_DIR: /build/ccache

# Define rules for CheckPoint configuration options across various services
x-checkpointopts: &checkpointopts
  CHECKPOINT_DOXYGEN_ENABLED: ${CHECKPOINT_DOCS:-0}
  CMAKE_BUILD_TYPE: ${BUILD_TYPE:-release}
  CODE_COVERAGE: ${CODE_COVERAGE:-0}
  https_proxy: ${PROXY-}
  http_proxy: ${PROXY-}

services:
  ##############################################################################
  # Build documentation for Checkpoint in the container on ubuntu platform from
  # container baseline.
  ubuntu-docs:
    image: ${REPO}:${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-docs
    build:
      context: .
      target: base
      dockerfile: ci/docker/ubuntu-${UBUNTU}-${COMPILER_TYPE}-docs.dockerfile
      cache_from:
        - ${REPO}:${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-cpp
      args: &default-args
        token: ${TOKEN}
    ulimits: &ulimits
      core: ${ULIMIT_CORE}
    environment:
      <<: *ccache
      CHECKPOINT_DOXYGEN_ENABLED: 1
      CMAKE_BUILD_TYPE: ${BUILD_TYPE:-release}
    volumes: &ubuntu-volumes
      - .:/checkpoint:delegated
      - ${CACHE}${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-cache:/build:delegated
    command: &docs-cpp-command >
      /bin/bash -c "
        /checkpoint/ci/build_cpp.sh /checkpoint /build ${TOKEN}"
